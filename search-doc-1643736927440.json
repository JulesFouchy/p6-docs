[{"title":"Summary","type":0,"sectionRef":"#","url":"reference","content":"Summary Welcome to the reference! In here you can find all the details of everything that is available in p6. Section Drawing Section Math Section Update Flow Type Angle Type Center Type Color Type Context Type Image An image can be drawn onto, and can be displayed. Type KeyEvent Type MouseButton Type MouseDrag Type MouseMove Type MouseScroll Type Radians Type Radii Type Radius Type Rotation Type Shader Type Transform2D","keywords":""},{"title":"Drawing","type":0,"sectionRef":"#","url":"reference/drawing","content":"","keywords":""},{"title":"Summary","type":1,"pageTitle":"Drawing","url":"reference/drawing#summary","content":""},{"title":"Functions","type":1,"pageTitle":"Drawing","url":"reference/drawing#functions","content":"\tNamevoid\tbackground(Color color) const Sets the color and alpha of each pixel of the canvas. void\trectangle(Transform2D transform) const Draws a rectangle. void\tcircle(Center center, Radius radius) const Draws a circle. void\tellipse(Center center, Radii radii, Rotation rotation) const Draws an ellipse. void\tellipse(Center center, Radius radius) const void\tellipse(Transform2D transform) const void\timage(const Image &amp; img, Transform2D transform) const Draws an image. "},{"title":"Attributes","type":1,"pageTitle":"Drawing","url":"reference/drawing#attributes","content":"\tNameColor\tfill Color\tstroke float\tstroke_weight "},{"title":"Functions","type":1,"pageTitle":"Drawing","url":"reference/drawing#functions-1","content":""},{"title":"background()","type":1,"pageTitle":"Drawing","url":"reference/drawing#background","content":"background(Color color) const; Sets the color and alpha of each pixel of the canvas. NB: No blending is applied; even if you specify an alpha of 0.5 the old canvas is completely erased. This means that setting an alpha here doesn't matter much. It is only meaningful if you export the canvas as a png, or if you later try to blend the canvas on top of another image. "},{"title":"rectangle()","type":1,"pageTitle":"Drawing","url":"reference/drawing#rectangle","content":"rectangle(Transform2D transform) const; Draws a rectangle. Parameters: params Shape of the rect p6.fill = {0.f, 0.8f, 0.3f};p6.rectangle({}); Copy "},{"title":"circle()","type":1,"pageTitle":"Drawing","url":"reference/drawing#circle","content":"circle(Center center, Radius radius) const; Draws a circle. "},{"title":"ellipse()","type":1,"pageTitle":"Drawing","url":"reference/drawing#ellipse","content":"ellipse(Center center, Radii radii, Rotation rotation) const; Draws an ellipse. "},{"title":"ellipse()","type":1,"pageTitle":"Drawing","url":"reference/drawing#ellipse-1","content":"ellipse(Center center, Radius radius) const; "},{"title":"ellipse()","type":1,"pageTitle":"Drawing","url":"reference/drawing#ellipse-2","content":"ellipse(Transform2D transform) const; "},{"title":"image()","type":1,"pageTitle":"Drawing","url":"reference/drawing#image","content":"image(const Image &amp; img, Transform2D transform) const; Draws an image. "},{"title":"Attributes","type":1,"pageTitle":"Drawing","url":"reference/drawing#attributes-1","content":""},{"title":"fill","type":1,"pageTitle":"Drawing","url":"reference/drawing#fill","content":"Color fill {1.f, 1.f, 1.f, 0.5f}; Copy "},{"title":"stroke","type":1,"pageTitle":"Drawing","url":"reference/drawing#stroke","content":"Color stroke {0.f, 0.f, 0.f}; Copy "},{"title":"stroke_weight","type":1,"pageTitle":"Drawing","url":"reference/drawing#stroke_weight","content":"float stroke_weight = 0.01f; Copy  Updated on 2022 February 01 "},{"title":"Math","type":0,"sectionRef":"#","url":"reference/math","content":"","keywords":""},{"title":"Summary","type":1,"pageTitle":"Math","url":"reference/math#summary","content":""},{"title":"Functions","type":1,"pageTitle":"Math","url":"reference/math#functions","content":"\tNametemplate &lt;typename T &gt; T\tmap(T x, T from_min, T from_max, T to_min, T to_max) Maps x, which is in the range [from_mix, from_max], to the range [to_min, to_max]. "},{"title":"Attributes","type":1,"pageTitle":"Math","url":"reference/math#attributes","content":"\tNameconstexpr float\tTAU constexpr float\tPI "},{"title":"Functions","type":1,"pageTitle":"Math","url":"reference/math#functions-1","content":""},{"title":"map()","type":1,"pageTitle":"Math","url":"reference/math#map","content":"map(T x, T from_min, T from_max, T to_min, T to_max); Maps x, which is in the range [from_mix, from_max], to the range [to_min, to_max]. For example if x == from_min, then the function returns to_min if x == (from_min + from_max) / 2 then the function returns (to_min + to_max) / 2 if x is outside of the range [from_min, from_max] the result will be outside of [to_min, to_max], the same linear behaviour still applies "},{"title":"Attributes","type":1,"pageTitle":"Math","url":"reference/math#attributes-1","content":""},{"title":"TAU","type":1,"pageTitle":"Math","url":"reference/math#tau","content":"static constexpr float TAU = 6.2831853f; Copy "},{"title":"PI","type":1,"pageTitle":"Math","url":"reference/math#pi","content":"static constexpr float PI = TAU / 2.f; Copy  Updated on 2022 February 01 "},{"title":"p6::Angle","type":0,"sectionRef":"#","url":"reference/Types/angle","content":"","keywords":""},{"title":"Summary","type":1,"pageTitle":"p6::Angle","url":"reference/Types/angle#summary","content":"\tName\tAngle(Radians value) float\tas_turns() const float\tas_radians() const float\tas_degrees() const Radians\tvalue "},{"title":"Details","type":1,"pageTitle":"p6::Angle","url":"reference/Types/angle#details","content":""},{"title":"Angle()","type":1,"pageTitle":"p6::Angle","url":"reference/Types/angle#angle","content":"Angle(Radians value); "},{"title":"as_turns()","type":1,"pageTitle":"p6::Angle","url":"reference/Types/angle#as_turns","content":"as_turns() const; "},{"title":"as_radians()","type":1,"pageTitle":"p6::Angle","url":"reference/Types/angle#as_radians","content":"as_radians() const; "},{"title":"as_degrees()","type":1,"pageTitle":"p6::Angle","url":"reference/Types/angle#as_degrees","content":"as_degrees() const; "},{"title":"value","type":1,"pageTitle":"p6::Angle","url":"reference/Types/angle#value","content":"Radians value; Copy  Updated on 2022 February 01 "},{"title":"p6::Color","type":0,"sectionRef":"#","url":"reference/Types/color","content":"","keywords":""},{"title":"Summary","type":1,"pageTitle":"p6::Color","url":"reference/Types/color#summary","content":"\tName\tColor(float r =0.f, float g =0.f, float b =0.f, float a =1.f) float\tr() const float\tg() const float\tb() const float\ta() const glm::vec3\tas_vec3() const glm::vec4\tas_vec4() const "},{"title":"Details","type":1,"pageTitle":"p6::Color","url":"reference/Types/color#details","content":""},{"title":"Color()","type":1,"pageTitle":"p6::Color","url":"reference/Types/color#color","content":"Color(float r =0.f, float g =0.f, float b =0.f, float a =1.f); "},{"title":"r()","type":1,"pageTitle":"p6::Color","url":"reference/Types/color#r","content":"r() const; "},{"title":"g()","type":1,"pageTitle":"p6::Color","url":"reference/Types/color#g","content":"g() const; "},{"title":"b()","type":1,"pageTitle":"p6::Color","url":"reference/Types/color#b","content":"b() const; "},{"title":"a()","type":1,"pageTitle":"p6::Color","url":"reference/Types/color#a","content":"a() const; "},{"title":"as_vec3()","type":1,"pageTitle":"p6::Color","url":"reference/Types/color#as_vec3","content":"as_vec3() const; "},{"title":"as_vec4()","type":1,"pageTitle":"p6::Color","url":"reference/Types/color#as_vec4","content":"as_vec4() const;  Updated on 2022 February 01 "},{"title":"p6::Center","type":0,"sectionRef":"#","url":"reference/Types/center","content":"","keywords":""},{"title":"Summary","type":1,"pageTitle":"p6::Center","url":"reference/Types/center#summary","content":"\tName\tCenter(glm::vec2 value) glm::vec2\tvalue "},{"title":"Details","type":1,"pageTitle":"p6::Center","url":"reference/Types/center#details","content":""},{"title":"Center()","type":1,"pageTitle":"p6::Center","url":"reference/Types/center#center","content":"Center(glm::vec2 value); "},{"title":"value","type":1,"pageTitle":"p6::Center","url":"reference/Types/center#value","content":"glm::vec2 value; Copy  Updated on 2022 February 01 "},{"title":"p6::Image","type":0,"sectionRef":"#","url":"reference/Types/image","content":"","keywords":""},{"title":"Summary","type":1,"pageTitle":"p6::Image","url":"reference/Types/image#summary","content":"\tName\tImage(ImageSize size, const uint8_t data =nullptr) data must be nullptr, or an array of size size.width() size.height() * 4, with R, G, B and A channels, starting with the bottom left pixel, and going row by row ImageSize\tsize() const Returns the size in pixels of the image. const Texture &amp;\ttexture() const Returns the internal texture, that you can use to do advanced stuff with custom shaders. void\tdestructive_resize(ImageSize size) Resizes the image /!\\ All of its content is lost. void\tresize(ImageSize size) Resizes the image. "},{"title":"Detailed Description","type":1,"pageTitle":"p6::Image","url":"reference/Types/image#detailed-description","content":"class p6::Image; Copy An image can be drawn onto, and can be displayed. If you plan on drawing on the image, you can create it without data (it will create a black and transparent image). If you want to load an image, you can use load_image() instead of the constructor "},{"title":"Details","type":1,"pageTitle":"p6::Image","url":"reference/Types/image#details","content":""},{"title":"Image()","type":1,"pageTitle":"p6::Image","url":"reference/Types/image#image","content":"Image(ImageSize size, const uint8_t * data =nullptr); data must be nullptr, or an array of size size.width() size.height() 4, with R, G, B and A channels, starting with the bottom left pixel, and going row by row "},{"title":"size()","type":1,"pageTitle":"p6::Image","url":"reference/Types/image#size","content":"size() const; Returns the size in pixels of the image. "},{"title":"texture()","type":1,"pageTitle":"p6::Image","url":"reference/Types/image#texture","content":"texture() const; Returns the internal texture, that you can use to do advanced stuff with custom shaders. "},{"title":"destructive_resize()","type":1,"pageTitle":"p6::Image","url":"reference/Types/image#destructive_resize","content":"destructive_resize(ImageSize size); Resizes the image /!\\ All of its content is lost. If you don't want that you can use resize() instead "},{"title":"resize()","type":1,"pageTitle":"p6::Image","url":"reference/Types/image#resize","content":"resize(ImageSize size); Resizes the image.  Updated on 2022 February 01 "},{"title":"p6::KeyEvent","type":0,"sectionRef":"#","url":"reference/Types/key_event","content":"","keywords":""},{"title":"Summary","type":1,"pageTitle":"p6::KeyEvent","url":"reference/Types/key_event#summary","content":"\tNamestd::string\tlogical_key The character that was pressed. int\tphysical_key The key at a given position on the keyboard. It is independent of the keyboard layout (e.g. GLFW_KEY_Q will correspond to the first key on the first row of your keyboard, no matter if you are using azerty instead of qwerty) "},{"title":"Details","type":1,"pageTitle":"p6::KeyEvent","url":"reference/Types/key_event#details","content":""},{"title":"logical_key","type":1,"pageTitle":"p6::KeyEvent","url":"reference/Types/key_event#logical_key","content":"std::string logical_key; Copy The character that was pressed. This depends on the keyboard layout (qwerty vs azerty). If the key pressed was not a character (for example ENTER, SHIFT etc.) then this is an empty string. "},{"title":"physical_key","type":1,"pageTitle":"p6::KeyEvent","url":"reference/Types/key_event#physical_key","content":"int physical_key; Copy The key at a given position on the keyboard. It is independent of the keyboard layout (e.g. GLFW_KEY_Q will correspond to the first key on the first row of your keyboard, no matter if you are using azerty instead of qwerty)  Updated on 2022 February 01 "},{"title":"p6::MouseButton","type":0,"sectionRef":"#","url":"reference/Types/mouse_button","content":"","keywords":""},{"title":"Summary","type":1,"pageTitle":"p6::MouseButton","url":"reference/Types/mouse_button#summary","content":"\tNameglm::vec2\tposition Button\tbutton "},{"title":"Details","type":1,"pageTitle":"p6::MouseButton","url":"reference/Types/mouse_button#details","content":""},{"title":"position","type":1,"pageTitle":"p6::MouseButton","url":"reference/Types/mouse_button#position","content":"glm::vec2 position; Copy "},{"title":"button","type":1,"pageTitle":"p6::MouseButton","url":"reference/Types/mouse_button#button","content":"Button button; Copy  Updated on 2022 February 01 "},{"title":"p6::MouseDrag","type":0,"sectionRef":"#","url":"reference/Types/mouse_drag","content":"","keywords":""},{"title":"Summary","type":1,"pageTitle":"p6::MouseDrag","url":"reference/Types/mouse_drag#summary","content":"\tNameglm::vec2\tposition glm::vec2\tdelta glm::vec2\tstart_position "},{"title":"Details","type":1,"pageTitle":"p6::MouseDrag","url":"reference/Types/mouse_drag#details","content":""},{"title":"position","type":1,"pageTitle":"p6::MouseDrag","url":"reference/Types/mouse_drag#position","content":"glm::vec2 position; Copy "},{"title":"delta","type":1,"pageTitle":"p6::MouseDrag","url":"reference/Types/mouse_drag#delta","content":"glm::vec2 delta; Copy "},{"title":"start_position","type":1,"pageTitle":"p6::MouseDrag","url":"reference/Types/mouse_drag#start_position","content":"glm::vec2 start_position; Copy  Updated on 2022 February 01 "},{"title":"p6::Context","type":0,"sectionRef":"#","url":"reference/Types/context","content":"","keywords":""},{"title":"Summary","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#summary","content":"\tName\tContext(WindowCreationParams window_creation_params ={}) void\tbackground(Color color) const Sets the color and alpha of each pixel of the canvas. void\trectangle(Transform2D transform) const Draws a rectangle. void\tcircle(Center center, Radius radius) const Draws a circle. void\tellipse(Center center, Radii radii, Rotation rotation) const Draws an ellipse. void\tellipse(Center center, Radius radius) const void\tellipse(Transform2D transform) const void\timage(const Image &amp; img, Transform2D transform) const Draws an image. void\trender_to_image(const Image &amp; image) const Sets the image where all the drawing commands will happen on. void\trender_to_screen() const Reset p6 to render to the screen. glm::vec2\tmouse() const Returns the current mouse position. glm::vec2\tmouse_delta() const Returns the movement of the mouse since last update() bool\tmouse_is_in_window() const Returns true iff the coordinates returned by mouse() correspond to a position inside the window, and the window is focused. bool\tctrl() const Returns true iff the CTRL key is pressed (or CMD on Mac) bool\tshift() const Returns true iff the SHIFT key is pressed. bool\talt() const Returns true iff the ALT key is pressed. float\taspect_ratio() const Returns the aspect ratio of the window (a.k.a. width / height) ImageSize\twindow_size() const Returns the size of the window. int\twindow_width() const Returns the width of the window. int\twindow_height() const Returns the height of the window. bool\twindow_is_focused() const Returns true iff the window is currently focused. void\tmaximize_window() Maximizes the window. float\ttime() const Returns the time in seconds since the creation of the Context. float\tdelta_time() const Returns the time in seconds since the last update() call (or 0 if this is the first update) void\tset_time_mode_realtime() Sets the time_mode as realtime. void\tset_time_mode_fixedstep() Sets the time_mode as fixedstep. void\tstart() Starts the update() loop. void\tstop() Stops the update() loop. void\tpause() Pauses the update() loop. void\tresume() Resumes the update() loop if it was paused with pause(). bool\tis_paused() const Returns true iff we are currently paused. See pause() and resume(). std::function&lt; void()&gt;\tupdate This function is called repeatedly, once every 1/framerate() seconds (or at least it will try, if your update code is too slow then the next updates will necessarily be delayed). std::function&lt; void(MouseMove)&gt;\tmouse_moved This function is called whenever the mouse is moved. std::function&lt; void(MouseDrag)&gt;\tmouse_dragged This function is called whenever the mouse is dragged. std::function&lt; void(MouseButton)&gt;\tmouse_pressed This function is called whenever a mouse button is pressed. std::function&lt; void(MouseButton)&gt;\tmouse_released This function is called whenever a mouse button is released. std::function&lt; void(MouseScroll)&gt;\tmouse_scrolled This function is called whenever the mouse wheel is scrolled. std::function&lt; void(KeyEvent)&gt;\tkey_pressed This function is called whenever a keyboard key is pressed. std::function&lt; void(KeyEvent)&gt;\tkey_released This function is called whenever a keyboard key is released. std::function&lt; void(KeyEvent)&gt;\tkey_repeated This function is called repeatedly whenever a keyboard key is held. std::function&lt; void(std::string &amp;&amp;)&gt;\ton_error This function is called whenever an error occurs. Color\tfill Color\tstroke float\tstroke_weight "},{"title":"Details","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#details","content":""},{"title":"Context()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#context","content":"Context(WindowCreationParams window_creation_params ={}); "},{"title":"background()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#background","content":"background(Color color) const; Sets the color and alpha of each pixel of the canvas. NB: No blending is applied; even if you specify an alpha of 0.5 the old canvas is completely erased. This means that setting an alpha here doesn't matter much. It is only meaningful if you export the canvas as a png, or if you later try to blend the canvas on top of another image. "},{"title":"rectangle()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#rectangle","content":"rectangle(Transform2D transform) const; Draws a rectangle. Parameters: params Shape of the rect p6.fill = {0.f, 0.8f, 0.3f};p6.rectangle({}); Copy "},{"title":"circle()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#circle","content":"circle(Center center, Radius radius) const; Draws a circle. "},{"title":"ellipse()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#ellipse","content":"ellipse(Center center, Radii radii, Rotation rotation) const; Draws an ellipse. "},{"title":"ellipse()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#ellipse-1","content":"ellipse(Center center, Radius radius) const; "},{"title":"ellipse()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#ellipse-2","content":"ellipse(Transform2D transform) const; "},{"title":"image()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#image","content":"image(const Image &amp; img, Transform2D transform) const; Draws an image. "},{"title":"render_to_image()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#render_to_image","content":"render_to_image(const Image &amp; image) const; Sets the image where all the drawing commands will happen on. "},{"title":"render_to_screen()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#render_to_screen","content":"render_to_screen() const; Reset p6 to render to the screen. "},{"title":"mouse()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#mouse","content":"mouse() const; Returns the current mouse position. "},{"title":"mouse_delta()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#mouse_delta","content":"mouse_delta() const; Returns the movement of the mouse since last update() "},{"title":"mouse_is_in_window()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#mouse_is_in_window","content":"mouse_is_in_window() const; Returns true iff the coordinates returned by mouse() correspond to a position inside the window, and the window is focused. "},{"title":"ctrl()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#ctrl","content":"ctrl() const; Returns true iff the CTRL key is pressed (or CMD on Mac) "},{"title":"shift()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#shift","content":"shift() const; Returns true iff the SHIFT key is pressed. "},{"title":"alt()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#alt","content":"alt() const; Returns true iff the ALT key is pressed. "},{"title":"aspect_ratio()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#aspect_ratio","content":"aspect_ratio() const; Returns the aspect ratio of the window (a.k.a. width / height) "},{"title":"window_size()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#window_size","content":"window_size() const; Returns the size of the window. "},{"title":"window_width()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#window_width","content":"window_width() const; Returns the width of the window. "},{"title":"window_height()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#window_height","content":"window_height() const; Returns the height of the window. "},{"title":"window_is_focused()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#window_is_focused","content":"window_is_focused() const; Returns true iff the window is currently focused. "},{"title":"maximize_window()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#maximize_window","content":"maximize_window(); Maximizes the window. "},{"title":"time()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#time","content":"time() const; Returns the time in seconds since the creation of the Context. "},{"title":"delta_time()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#delta_time","content":"delta_time() const; Returns the time in seconds since the last update() call (or 0 if this is the first update) "},{"title":"set_time_mode_realtime()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#set_time_mode_realtime","content":"set_time_mode_realtime(); Sets the time_mode as realtime. This means that what is returned by time() and delta_time() corresponds to the actual time that elapsed in the real world. This is ideal when you want to do realtime animation and interactive sketches. "},{"title":"set_time_mode_fixedstep()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#set_time_mode_fixedstep","content":"set_time_mode_fixedstep(); Sets the time_mode as fixedstep. This means that what is returned by time() and delta_time() corresponds to an ideal world where there is exactly 1/framerate seconds between each updates. This is ideal when you are exporting a video and don't want the long export time to influence your animation. "},{"title":"start()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#start","content":"start(); Starts the update() loop. update() will be called repeatedly, until you close the window or call stop() "},{"title":"stop()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#stop","content":"stop(); Stops the update() loop. This is the programatic equivalent of a user closing the window. "},{"title":"pause()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#pause","content":"pause(); Pauses the update() loop. No update() will be called, until you call resume(). User inputs are still processed. "},{"title":"resume()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#resume","content":"resume(); Resumes the update() loop if it was paused with pause(). It has no effect if the loop was already playing. "},{"title":"is_paused()","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#is_paused","content":"is_paused() const; Returns true iff we are currently paused. See pause() and resume(). "},{"title":"update","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#update","content":"std::function&lt; void()&gt; update = []() {}; Copy This function is called repeatedly, once every 1/framerate() seconds (or at least it will try, if your update code is too slow then the next updates will necessarily be delayed). "},{"title":"mouse_moved","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#mouse_moved","content":"std::function&lt; void(MouseMove)&gt; mouse_moved = [](MouseMove) {}; Copy This function is called whenever the mouse is moved. "},{"title":"mouse_dragged","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#mouse_dragged","content":"std::function&lt; void(MouseDrag)&gt; mouse_dragged = [](MouseDrag) {}; Copy This function is called whenever the mouse is dragged. "},{"title":"mouse_pressed","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#mouse_pressed","content":"std::function&lt; void(MouseButton)&gt; mouse_pressed = [](MouseButton) {}; Copy This function is called whenever a mouse button is pressed. "},{"title":"mouse_released","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#mouse_released","content":"std::function&lt; void(MouseButton)&gt; mouse_released = [](MouseButton) {}; Copy This function is called whenever a mouse button is released. "},{"title":"mouse_scrolled","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#mouse_scrolled","content":"std::function&lt; void(MouseScroll)&gt; mouse_scrolled = [](MouseScroll) {}; Copy This function is called whenever the mouse wheel is scrolled. "},{"title":"key_pressed","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#key_pressed","content":"std::function&lt; void(KeyEvent)&gt; key_pressed = [](KeyEvent) {}; Copy This function is called whenever a keyboard key is pressed. "},{"title":"key_released","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#key_released","content":"std::function&lt; void(KeyEvent)&gt; key_released = [](KeyEvent) {}; Copy This function is called whenever a keyboard key is released. "},{"title":"key_repeated","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#key_repeated","content":"std::function&lt; void(KeyEvent)&gt; key_repeated = [](KeyEvent) {}; Copy This function is called repeatedly whenever a keyboard key is held. (NB: this only starts after holding the key for a little while. The axact behaviour is OS-specific) /!\\ This is less than ideal to do things like handling the movement of a character. You should rather do, in your update function: ```cpp if (p6.is_held(PhysicalKey::W)) { // TODO implement is_held and PhysicalKey and LogicalKey character.move_forward(p6.delta_time()); }  ### on_error ```cppstd::function&lt; void(std::string &amp;&amp;)&gt; on_error = [](std::string&amp;&amp; error_message) { throw std::runtime_error{error_message}; }; Copy This function is called whenever an error occurs. "},{"title":"fill","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#fill","content":"Color fill {1.f, 1.f, 1.f, 0.5f}; Copy "},{"title":"stroke","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#stroke","content":"Color stroke {0.f, 0.f, 0.f}; Copy "},{"title":"stroke_weight","type":1,"pageTitle":"p6::Context","url":"reference/Types/context#stroke_weight","content":"float stroke_weight = 0.01f; Copy  Updated on 2022 February 01 "},{"title":"p6::MouseMove","type":0,"sectionRef":"#","url":"reference/Types/mouse_move","content":"","keywords":""},{"title":"Summary","type":1,"pageTitle":"p6::MouseMove","url":"reference/Types/mouse_move#summary","content":"\tNameglm::vec2\tposition glm::vec2\tdelta "},{"title":"Details","type":1,"pageTitle":"p6::MouseMove","url":"reference/Types/mouse_move#details","content":""},{"title":"position","type":1,"pageTitle":"p6::MouseMove","url":"reference/Types/mouse_move#position","content":"glm::vec2 position; Copy "},{"title":"delta","type":1,"pageTitle":"p6::MouseMove","url":"reference/Types/mouse_move#delta","content":"glm::vec2 delta; Copy  Updated on 2022 February 01 "},{"title":"p6::MouseScroll","type":0,"sectionRef":"#","url":"reference/Types/mouse_scroll","content":"","keywords":""},{"title":"Summary","type":1,"pageTitle":"p6::MouseScroll","url":"reference/Types/mouse_scroll#summary","content":"\tNamefloat\tdx float\tdy "},{"title":"Details","type":1,"pageTitle":"p6::MouseScroll","url":"reference/Types/mouse_scroll#details","content":""},{"title":"dx","type":1,"pageTitle":"p6::MouseScroll","url":"reference/Types/mouse_scroll#dx","content":"float dx; Copy "},{"title":"dy","type":1,"pageTitle":"p6::MouseScroll","url":"reference/Types/mouse_scroll#dy","content":"float dy; Copy  Updated on 2022 February 01 "},{"title":"p6::Radii","type":0,"sectionRef":"#","url":"reference/Types/radii","content":"","keywords":""},{"title":"Summary","type":1,"pageTitle":"p6::Radii","url":"reference/Types/radii#summary","content":"\tName\tRadii(float x, float y) Radii(glm::vec2 v) glm::vec2\tvalue "},{"title":"Details","type":1,"pageTitle":"p6::Radii","url":"reference/Types/radii#details","content":""},{"title":"Radii()","type":1,"pageTitle":"p6::Radii","url":"reference/Types/radii#radii","content":"Radii(float x, float y); "},{"title":"Radii()","type":1,"pageTitle":"p6::Radii","url":"reference/Types/radii#radii-1","content":"Radii(glm::vec2 v); "},{"title":"value","type":1,"pageTitle":"p6::Radii","url":"reference/Types/radii#value","content":"glm::vec2 value; Copy  Updated on 2022 February 01 "},{"title":"p6::Radians","type":0,"sectionRef":"#","url":"reference/Types/radians","content":"","keywords":""},{"title":"Summary","type":1,"pageTitle":"p6::Radians","url":"reference/Types/radians#summary","content":"\tName\tRadians(float value) float\tvalue "},{"title":"Details","type":1,"pageTitle":"p6::Radians","url":"reference/Types/radians#details","content":""},{"title":"Radians()","type":1,"pageTitle":"p6::Radians","url":"reference/Types/radians#radians","content":"Radians(float value); "},{"title":"value","type":1,"pageTitle":"p6::Radians","url":"reference/Types/radians#value","content":"float value; Copy  Updated on 2022 February 01 "},{"title":"p6::Rotation","type":0,"sectionRef":"#","url":"reference/Types/rotation","content":"","keywords":""},{"title":"Summary","type":1,"pageTitle":"p6::Rotation","url":"reference/Types/rotation#summary","content":"\tNameAngle\tvalue "},{"title":"Details","type":1,"pageTitle":"p6::Rotation","url":"reference/Types/rotation#details","content":""},{"title":"value","type":1,"pageTitle":"p6::Rotation","url":"reference/Types/rotation#value","content":"Angle value; Copy  Updated on 2022 February 01 "},{"title":"p6::Radius","type":0,"sectionRef":"#","url":"reference/Types/radius","content":"","keywords":""},{"title":"Summary","type":1,"pageTitle":"p6::Radius","url":"reference/Types/radius#summary","content":"\tNamefloat\tvalue "},{"title":"Details","type":1,"pageTitle":"p6::Radius","url":"reference/Types/radius#details","content":""},{"title":"value","type":1,"pageTitle":"p6::Radius","url":"reference/Types/radius#value","content":"float value; Copy  Updated on 2022 February 01 "},{"title":"p6::Transform2D","type":0,"sectionRef":"#","url":"reference/Types/transform2_d","content":"","keywords":""},{"title":"Summary","type":1,"pageTitle":"p6::Transform2D","url":"reference/Types/transform2_d#summary","content":"\tNameglm::vec2\tposition glm::vec2\tscale Angle\trotation "},{"title":"Details","type":1,"pageTitle":"p6::Transform2D","url":"reference/Types/transform2_d#details","content":""},{"title":"position","type":1,"pageTitle":"p6::Transform2D","url":"reference/Types/transform2_d#position","content":"glm::vec2 position {0.f}; Copy "},{"title":"scale","type":1,"pageTitle":"p6::Transform2D","url":"reference/Types/transform2_d#scale","content":"glm::vec2 scale {1.f}; Copy "},{"title":"rotation","type":1,"pageTitle":"p6::Transform2D","url":"reference/Types/transform2_d#rotation","content":"Angle rotation {0.0_radians}; Copy  Updated on 2022 February 01 "},{"title":"p6::Shader","type":0,"sectionRef":"#","url":"reference/Types/shader","content":"","keywords":""},{"title":"Summary","type":1,"pageTitle":"p6::Shader","url":"reference/Types/shader#summary","content":"\tName\tShader(const std::string &amp; fragment_source_code) Throws std::runtime_error if there is an error while compiling the shader source code. void\tbind() const void\tset(const std::string &amp; uniform_name, int v) const void\tset(const std::string &amp; uniform_name, unsigned int v) const void\tset(const std::string &amp; uniform_name, bool v) const void\tset(const std::string &amp; uniform_name, float v) const void\tset(const std::string &amp; uniform_name, const glm::vec2 &amp; v) const void\tset(const std::string &amp; uniform_name, const glm::vec3 &amp; v) const void\tset(const std::string &amp; uniform_name, const glm::vec4 &amp; v) const void\tset(const std::string &amp; uniform_name, const glm::mat2 &amp; mat) const void\tset(const std::string &amp; uniform_name, const glm::mat3 &amp; mat) const void\tset(const std::string &amp; uniform_name, const glm::mat4 &amp; mat) const "},{"title":"Details","type":1,"pageTitle":"p6::Shader","url":"reference/Types/shader#details","content":""},{"title":"Shader()","type":1,"pageTitle":"p6::Shader","url":"reference/Types/shader#shader","content":"Shader(const std::string &amp; fragment_source_code); Throws std::runtime_error if there is an error while compiling the shader source code. "},{"title":"bind()","type":1,"pageTitle":"p6::Shader","url":"reference/Types/shader#bind","content":"bind() const; "},{"title":"set()","type":1,"pageTitle":"p6::Shader","url":"reference/Types/shader#set","content":"set(const std::string &amp; uniform_name, int v) const; "},{"title":"set()","type":1,"pageTitle":"p6::Shader","url":"reference/Types/shader#set-1","content":"set(const std::string &amp; uniform_name, unsigned int v) const; "},{"title":"set()","type":1,"pageTitle":"p6::Shader","url":"reference/Types/shader#set-2","content":"set(const std::string &amp; uniform_name, bool v) const; "},{"title":"set()","type":1,"pageTitle":"p6::Shader","url":"reference/Types/shader#set-3","content":"set(const std::string &amp; uniform_name, float v) const; "},{"title":"set()","type":1,"pageTitle":"p6::Shader","url":"reference/Types/shader#set-4","content":"set(const std::string &amp; uniform_name, const glm::vec2 &amp; v) const; "},{"title":"set()","type":1,"pageTitle":"p6::Shader","url":"reference/Types/shader#set-5","content":"set(const std::string &amp; uniform_name, const glm::vec3 &amp; v) const; "},{"title":"set()","type":1,"pageTitle":"p6::Shader","url":"reference/Types/shader#set-6","content":"set(const std::string &amp; uniform_name, const glm::vec4 &amp; v) const; "},{"title":"set()","type":1,"pageTitle":"p6::Shader","url":"reference/Types/shader#set-7","content":"set(const std::string &amp; uniform_name, const glm::mat2 &amp; mat) const; "},{"title":"set()","type":1,"pageTitle":"p6::Shader","url":"reference/Types/shader#set-8","content":"set(const std::string &amp; uniform_name, const glm::mat3 &amp; mat) const; "},{"title":"set()","type":1,"pageTitle":"p6::Shader","url":"reference/Types/shader#set-9","content":"set(const std::string &amp; uniform_name, const glm::mat4 &amp; mat) const;  Updated on 2022 February 01 "},{"title":"Update Flow","type":0,"sectionRef":"#","url":"reference/update-flow","content":"","keywords":""},{"title":"Summary","type":1,"pageTitle":"Update Flow","url":"reference/update-flow#summary","content":""},{"title":"Functions","type":1,"pageTitle":"Update Flow","url":"reference/update-flow#functions","content":"\tNamevoid\tstart() Starts the update() loop. void\tstop() Stops the update() loop. void\tpause() Pauses the update() loop. void\tresume() Resumes the update() loop if it was paused with pause(). bool\tis_paused() const Returns true iff we are currently paused. See pause() and resume(). "},{"title":"Functions","type":1,"pageTitle":"Update Flow","url":"reference/update-flow#functions-1","content":""},{"title":"start()","type":1,"pageTitle":"Update Flow","url":"reference/update-flow#start","content":"start(); Starts the update() loop. update() will be called repeatedly, until you close the window or call stop() "},{"title":"stop()","type":1,"pageTitle":"Update Flow","url":"reference/update-flow#stop","content":"stop(); Stops the update() loop. This is the programatic equivalent of a user closing the window. "},{"title":"pause()","type":1,"pageTitle":"Update Flow","url":"reference/update-flow#pause","content":"pause(); Pauses the update() loop. No update() will be called, until you call resume(). User inputs are still processed. "},{"title":"resume()","type":1,"pageTitle":"Update Flow","url":"reference/update-flow#resume","content":"resume(); Resumes the update() loop if it was paused with pause(). It has no effect if the loop was already playing. "},{"title":"is_paused()","type":1,"pageTitle":"Update Flow","url":"reference/update-flow#is_paused","content":"is_paused() const; Returns true iff we are currently paused. See pause() and resume().  Updated on 2022 February 01 "},{"title":"Introduction","type":0,"sectionRef":"#","url":"tutorials","content":"Introduction","keywords":""}]