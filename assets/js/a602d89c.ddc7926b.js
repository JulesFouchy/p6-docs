"use strict";(self.webpackChunkp6_docs=self.webpackChunkp6_docs||[]).push([[1545],{3905:function(e,t,r){r.d(t,{Zo:function(){return m},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},m=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=s(r),d=a,g=u["".concat(l,".").concat(d)]||u[d]||c[d]||i;return r?n.createElement(g,p(p({ref:t},m),{},{components:r})):n.createElement(g,p({ref:t},m))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,p=new Array(i);p[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,p[1]=o;for(var s=2;s<i;s++)p[s]=r[s];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},1233:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return m},default:function(){return u}});var n=r(2122),a=r(9756),i=(r(7294),r(3905)),p=["components"],o={title:"p6::Image",sidebar_position:1},l="p6::Image",s={unversionedId:"reference/Types/image",id:"reference/Types/image",isDocsHomePage:!1,title:"p6::Image",description:"Section: Image",source:"@site/docs/reference/Types/image.md",sourceDirName:"reference/Types",slug:"/reference/Types/image",permalink:"/p6-docs/reference/Types/image",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"p6::Image",sidebar_position:1},sidebar:"reference",previous:{title:"p6::FullScreen",permalink:"/p6-docs/reference/Types/full_screen"},next:{title:"p6::ImageOrCanvas",permalink:"/p6-docs/reference/Types/image_or_canvas"}},m=[{value:"Summary",id:"summary",children:[]},{value:"Details",id:"details",children:[{value:"Image()",id:"image",children:[]},{value:"size()",id:"size",children:[]},{value:"aspect_ratio()",id:"aspect_ratio",children:[]},{value:"inverse_aspect_ratio()",id:"inverse_aspect_ratio",children:[]},{value:"texture()",id:"texture",children:[]}]}],c={toc:m};function u(e){var t=e.components,r=(0,a.Z)(e,p);return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"p6image"},"p6::Image"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Section:")," ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"/reference/image"},"Image"))),(0,i.kt)("p",null,"Inherits from ",(0,i.kt)("a",{parentName:"p",href:"/reference/Types/image_or_canvas"},"p6::ImageOrCanvas")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/reference/Types/image#image"},"Image")),"(",(0,i.kt)("inlineCode",{parentName:"td"},"ImageSize")," size, ",(0,i.kt)("inlineCode",{parentName:"td"},"const uint8_t *")," data, ",(0,i.kt)("inlineCode",{parentName:"td"},"glpp::TextureLayout")," texture_layout = {glpp::InternalFormat::RGBA8, glpp::Channels::RGBA, glpp::TexelDataType::UnsignedByte})",(0,i.kt)("br",null),"Creates an ",(0,i.kt)("a",{parentName:"td",href:"/reference/Types/image"},"Image")," filled with data.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ImageSize"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/reference/Types/image#size"},"size")),"() const",(0,i.kt)("br",null),"Returns the size in pixels.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"virtual float"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/reference/Types/image#aspect_ratio"},"aspect_ratio")),"() const override",(0,i.kt)("br",null),"Returns the aspect ratio (",(0,i.kt)("inlineCode",{parentName:"td"},"width / height"),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"float"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/reference/Types/image#inverse_aspect_ratio"},"inverse_aspect_ratio")),"() const",(0,i.kt)("br",null),"Returns the inverse aspect ratio (",(0,i.kt)("inlineCode",{parentName:"td"},"height / width"),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"virtual const glpp::Texture2D &"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/reference/Types/image#texture"},"texture")),"() const override")))),(0,i.kt)("h2",{id:"details"},"Details"),(0,i.kt)("h3",{id:"image"},"Image()"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"/reference/Types/image#image"},"Image")),"(",(0,i.kt)("inlineCode",{parentName:"p"},"ImageSize")," size, ",(0,i.kt)("inlineCode",{parentName:"p"},"const uint8_t *")," data, ",(0,i.kt)("inlineCode",{parentName:"p"},"glpp::TextureLayout")," texture_layout ={glpp::InternalFormat::RGBA8, glpp::Channels::RGBA, glpp::TexelDataType::UnsignedByte});")),(0,i.kt)("p",null,"Creates an ",(0,i.kt)("a",{parentName:"p",href:"/reference/Types/image"},"Image")," filled with data. "),(0,i.kt)("p",null,"This is for advanded uses; prefer using ",(0,i.kt)("a",{parentName:"p",href:"/reference/image#load_image"},"p6::load_image()"),". data must be an array of size ",(0,i.kt)("inlineCode",{parentName:"p"},"size.width() * size.height() * 4"),", with R, G, B and A channels, starting with the bottom left pixel, and going row by row. texture_layout is an advanced setting; it controls how the pixels are gonna be stored on the GPU. "),(0,i.kt)("h3",{id:"size"},"size()"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"ImageSize")," ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"/reference/Types/image#size"},"size")),"() const;")),(0,i.kt)("p",null,"Returns the size in pixels. "),(0,i.kt)("h3",{id:"aspect_ratio"},"aspect_ratio()"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"float")," ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"/reference/Types/image#aspect_ratio"},"aspect_ratio")),"() const override;")),(0,i.kt)("p",null,"Returns the aspect ratio (",(0,i.kt)("inlineCode",{parentName:"p"},"width / height"),") "),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reimplements"),": ",(0,i.kt)("a",{parentName:"p",href:"/reference/Types/image_or_canvas#aspect_ratio"},"p6::ImageOrCanvas::aspect_ratio")),(0,i.kt)("h3",{id:"inverse_aspect_ratio"},"inverse_aspect_ratio()"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"float")," ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"/reference/Types/image#inverse_aspect_ratio"},"inverse_aspect_ratio")),"() const;")),(0,i.kt)("p",null,"Returns the inverse aspect ratio (",(0,i.kt)("inlineCode",{parentName:"p"},"height / width"),") "),(0,i.kt)("h3",{id:"texture"},"texture()"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"const glpp::Texture2D &")," ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"/reference/Types/image#texture"},"texture")),"() const override;")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reimplements"),": ",(0,i.kt)("a",{parentName:"p",href:"/reference/Types/image_or_canvas#texture"},"p6::ImageOrCanvas::texture")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Updated on 2022 May 18"))}u.isMDXComponent=!0}}]);