"use strict";(self.webpackChunkp6_docs=self.webpackChunkp6_docs||[]).push([[9819],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(r),m=a,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return r?n.createElement(h,s(s({ref:t},c),{},{components:r})):n.createElement(h,s({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var u=2;u<o;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9799:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var n=r(2122),a=r(9756),o=(r(7294),r(3905)),s=["components"],i={title:"Custom Shaders"},l=void 0,u={unversionedId:"tutorials/custom-shaders",id:"tutorials/custom-shaders",isDocsHomePage:!1,title:"Custom Shaders",description:"You can easily apply custom shaders in p6. A shader is a program that runs on the GPU and computes a color for each pixel of a rectangle. You can learn about shaders on the Art of Code channel.",source:"@site/docs/tutorials/06-custom-shaders.md",sourceDirName:"tutorials",slug:"/tutorials/custom-shaders",permalink:"/p6-docs/tutorials/custom-shaders",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Custom Shaders"},sidebar:"tutorials",previous:{title:"Images",permalink:"/p6-docs/tutorials/images"}},c=[{value:"Load and Draw a shader",id:"load-and-draw-a-shader",children:[]},{value:"UV",id:"uv",children:[]},{value:"Sending parameters to shaders",id:"sending-parameters-to-shaders",children:[]}],p={toc:c};function d(e){var t=e.components,r=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You can easily apply custom shaders in p6. A shader is a program that runs on the GPU and computes a color for each pixel of a rectangle. You can learn about shaders on the ",(0,o.kt)("a",{parentName:"p",href:"https://youtu.be/u5HAYVHsasc?list=PLGmrMu-IwbguU_nY2egTFmlg691DN7uE5"},"Art of Code channel"),"."),(0,o.kt)("h2",{id:"load-and-draw-a-shader"},"Load and Draw a shader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <p6/p6.h>\n\nint main()\n{\n    auto             ctx       = p6::Context{};\n    const p6::Shader my_shader = p6::load_shader("res/my_shader.frag");\n    ctx.update              = [&]() {\n        ctx.background({});\n        ctx.rectangle_with_shader(my_shader, p6::FullScreen{});\n    };\n    ctx.start();\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-glsl",metastring:'title="res/my_shader.frag"',title:'"res/my_shader.frag"'},"#version 330\nout vec4 _frag_color;\n\nin vec2 _uniform_uv;\nin vec2 _raw_uv;\nin vec2 _canvas_uv;\n\nvoid main()\n{\n    vec2 uv = _uniform_uv;\n    _frag_color = vec4(vec3(smoothstep(0.301, 0.3, length(uv))), 1.); // Draw a white disk\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"NB:")," For this example to work you must ask p6 to copy your ",(0,o.kt)("em",{parentName:"p"},"res")," folder. To do so, add this line in your CMakeLists.txt: ",(0,o.kt)("inlineCode",{parentName:"p"},"p6_copy_folder(${PROJECT_NAME} res)"),"."),(0,o.kt)("h2",{id:"uv"},"UV"),(0,o.kt)("p",null,"You have different coordinate systems available to you:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_uniform_uv")," is what you should use most of the time. It is centered around (0, 0) and the y-axis goes from -1 to 1. The x-axis will adapt to the aspect ratio of the rectangle."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_raw_uv")," goes from 0 to 1 on both axes, no matter the aspect ratio of the rectangle. (0, 0) is in the bottom-left corner."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_canvas_uv")," is like ",(0,o.kt)("em",{parentName:"li"},"_uniform_uv")," but the axes go from ",(0,o.kt)("em",{parentName:"li"},"-rectangle_radii")," to ",(0,o.kt)("em",{parentName:"li"},"+rectangle_radii"),". You will probably never have a use case for this one. It is used internally to draw strokes with an absolute size instead of them beeing proportional to the size of the rectangle.")),(0,o.kt)("h2",{id:"sending-parameters-to-shaders"},"Sending parameters to shaders"),(0,o.kt)("p",null,"Parameters for shaders are called ",(0,o.kt)("em",{parentName:"p"},"uniforms"),". You declare them in your shader like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-glsl",metastring:'title="res/my_shader.frag"',title:'"res/my_shader.frag"'},"#version 330\n\nuniform float my_parameter;\nuniform vec3  another_parameter;\n// . . .\n\nvoid main() {\n    _frag_color = vec4(another_parameter, 1.); // Use another_parameter like any other variable\n}\n")),(0,o.kt)("p",null,"And you send them to your shader with ",(0,o.kt)("inlineCode",{parentName:"p"},"set()"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'ctx.update = [&]() {\n    my_shader.set("my_parameter", 3.14f);\n    my_shader.set("another_parameter", glm::vec3{0.1f, 0.4f, ctx.time()});\n    // . . .\n};\n')))}d.isMDXComponent=!0}}]);