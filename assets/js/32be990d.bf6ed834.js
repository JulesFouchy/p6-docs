"use strict";(self.webpackChunkp6_docs=self.webpackChunkp6_docs||[]).push([[1870],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,k=d["".concat(p,".").concat(m)]||d[m]||u[m]||s;return n?r.createElement(k,i(i({ref:t},c),{},{components:n})):r.createElement(k,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2530:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return c},default:function(){return d}});var r=n(2122),a=n(9756),s=(n(7294),n(3905)),i=["components"],o={title:"p6::Canvas",summary:"A canvas is an image that can be drawn onto.",sidebar_position:1},p="p6::Canvas",l={unversionedId:"reference/Types/canvas",id:"reference/Types/canvas",isDocsHomePage:!1,title:"p6::Canvas",description:"Section: Canvas",source:"@site/docs/reference/Types/canvas.md",sourceDirName:"reference/Types",slug:"/reference/Types/canvas",permalink:"/p6-docs/reference/Types/canvas",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"p6::Canvas",summary:"A canvas is an image that can be drawn onto.",sidebar_position:1},sidebar:"reference",previous:{title:"p6::BottomRightCorner",permalink:"/p6-docs/reference/Types/bottom_right_corner"},next:{title:"p6::Center",permalink:"/p6-docs/reference/Types/center"}},c=[{value:"Summary",id:"summary",children:[]},{value:"Details",id:"details",children:[{value:"Canvas()",id:"canvas",children:[]},{value:"size()",id:"size",children:[]},{value:"aspect_ratio()",id:"aspect_ratio",children:[]},{value:"inverse_aspect_ratio()",id:"inverse_aspect_ratio",children:[]},{value:"texture()",id:"texture",children:[]},{value:"render_target()",id:"render_target",children:[]},{value:"render_target()",id:"render_target-1",children:[]},{value:"resize()",id:"resize",children:[]},{value:"destructive_resize()",id:"destructive_resize",children:[]}]}],u={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"p6canvas"},"p6::Canvas"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Section:")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/reference/canvas"},"Canvas"))),(0,s.kt)("p",null,"A canvas is an image that can be drawn onto. "),(0,s.kt)("p",null,"Inherits from ",(0,s.kt)("a",{parentName:"p",href:"/reference/Types/image_or_canvas"},"p6::ImageOrCanvas")),(0,s.kt)("h2",{id:"summary"},"Summary"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null}),(0,s.kt)("th",{parentName:"tr",align:null},"Name"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null}),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/reference/Types/canvas#canvas"},"Canvas")),"(",(0,s.kt)("inlineCode",{parentName:"td"},"ImageSize")," size, ",(0,s.kt)("inlineCode",{parentName:"td"},"glpp::TextureLayout")," texture_layout = {glpp::InternalFormat::RGBA16, glpp::Channels::RGBA, glpp::TexelDataType::UnsignedByte})",(0,s.kt)("br",null),"Creates an empty canvas texture_layout is an advanced setting; it controls how the pixels are gonna be stored on the GPU.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"ImageSize"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/reference/Types/canvas#size"},"size")),"() const",(0,s.kt)("br",null),"Returns the size in pixels.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"virtual float"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/reference/Types/canvas#aspect_ratio"},"aspect_ratio")),"() const override",(0,s.kt)("br",null),"Returns the aspect ratio (",(0,s.kt)("inlineCode",{parentName:"td"},"width / height"),")")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"float"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/reference/Types/canvas#inverse_aspect_ratio"},"inverse_aspect_ratio")),"() const",(0,s.kt)("br",null),"Returns the inverse aspect ratio (",(0,s.kt)("inlineCode",{parentName:"td"},"height / width"),")")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"virtual const Texture &"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/reference/Types/canvas#texture"},"texture")),"() const override",(0,s.kt)("br",null),"Returns the internal texture, that you can use to do advanced stuff with custom shaders.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"const glpp::RenderTarget &"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/reference/Types/canvas#render_target"},"render_target")),"() const",(0,s.kt)("br",null),"Returns the internal render target, that you can use to do advanced stuff.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"glpp::RenderTarget &"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/reference/Types/canvas#render_target"},"render_target")),"()",(0,s.kt)("br",null),"Returns the internal render target, that you can use to do advanced stuff.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"void"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/reference/Types/canvas#resize"},"resize")),"(",(0,s.kt)("inlineCode",{parentName:"td"},"ImageSize")," size)",(0,s.kt)("br",null),"Resizes the canvas.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"void"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/reference/Types/canvas#destructive_resize"},"destructive_resize")),"(",(0,s.kt)("inlineCode",{parentName:"td"},"ImageSize")," size)",(0,s.kt)("br",null),"Resizes the canvas.")))),(0,s.kt)("h2",{id:"details"},"Details"),(0,s.kt)("h3",{id:"canvas"},"Canvas()"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/reference/Types/canvas#canvas"},"Canvas")),"(",(0,s.kt)("inlineCode",{parentName:"p"},"ImageSize")," size, ",(0,s.kt)("inlineCode",{parentName:"p"},"glpp::TextureLayout")," texture_layout ={glpp::InternalFormat::RGBA16, glpp::Channels::RGBA, glpp::TexelDataType::UnsignedByte});")),(0,s.kt)("p",null,"Creates an empty canvas texture_layout is an advanced setting; it controls how the pixels are gonna be stored on the GPU. "),(0,s.kt)("h3",{id:"size"},"size()"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("inlineCode",{parentName:"p"},"ImageSize")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/reference/Types/canvas#size"},"size")),"() const;")),(0,s.kt)("p",null,"Returns the size in pixels. "),(0,s.kt)("h3",{id:"aspect_ratio"},"aspect_ratio()"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("inlineCode",{parentName:"p"},"float")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/reference/Types/canvas#aspect_ratio"},"aspect_ratio")),"() const override;")),(0,s.kt)("p",null,"Returns the aspect ratio (",(0,s.kt)("inlineCode",{parentName:"p"},"width / height"),") "),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Reimplements"),": ",(0,s.kt)("a",{parentName:"p",href:"/reference/Types/image_or_canvas#aspect_ratio"},"p6::ImageOrCanvas::aspect_ratio")),(0,s.kt)("h3",{id:"inverse_aspect_ratio"},"inverse_aspect_ratio()"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("inlineCode",{parentName:"p"},"float")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/reference/Types/canvas#inverse_aspect_ratio"},"inverse_aspect_ratio")),"() const;")),(0,s.kt)("p",null,"Returns the inverse aspect ratio (",(0,s.kt)("inlineCode",{parentName:"p"},"height / width"),") "),(0,s.kt)("h3",{id:"texture"},"texture()"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("inlineCode",{parentName:"p"},"const Texture &")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/reference/Types/canvas#texture"},"texture")),"() const override;")),(0,s.kt)("p",null,"Returns the internal texture, that you can use to do advanced stuff with custom shaders. "),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Reimplements"),": ",(0,s.kt)("a",{parentName:"p",href:"/reference/Types/image_or_canvas#texture"},"p6::ImageOrCanvas::texture")),(0,s.kt)("h3",{id:"render_target"},"render_target()"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("inlineCode",{parentName:"p"},"const glpp::RenderTarget &")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/reference/Types/canvas#render_target"},"render_target")),"() const;")),(0,s.kt)("p",null,"Returns the internal render target, that you can use to do advanced stuff. "),(0,s.kt)("h3",{id:"render_target-1"},"render_target()"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("inlineCode",{parentName:"p"},"glpp::RenderTarget &")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/reference/Types/canvas#render_target"},"render_target")),"();")),(0,s.kt)("p",null,"Returns the internal render target, that you can use to do advanced stuff. "),(0,s.kt)("h3",{id:"resize"},"resize()"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("inlineCode",{parentName:"p"},"void")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/reference/Types/canvas#resize"},"resize")),"(",(0,s.kt)("inlineCode",{parentName:"p"},"ImageSize")," size);")),(0,s.kt)("p",null,"Resizes the canvas. "),(0,s.kt)("h3",{id:"destructive_resize"},"destructive_resize()"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("inlineCode",{parentName:"p"},"void")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/reference/Types/canvas#destructive_resize"},"destructive_resize")),"(",(0,s.kt)("inlineCode",{parentName:"p"},"ImageSize")," size);")),(0,s.kt)("p",null,"Resizes the canvas. "),(0,s.kt)("p",null,"\u26a0\ufe0f All of its pixel content is lost. If you don't want that you can use ",(0,s.kt)("a",{parentName:"p",href:"/reference/Types/canvas#resize"},"resize()")," instead. "),(0,s.kt)("hr",null),(0,s.kt)("p",null,"Updated on 2022 May 18"))}d.isMDXComponent=!0}}]);