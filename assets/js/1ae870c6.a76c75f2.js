"use strict";(self.webpackChunkp6_docs=self.webpackChunkp6_docs||[]).push([[9229],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),p=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(a),d=n,h=u["".concat(l,".").concat(d)]||u[d]||c[d]||o;return a?r.createElement(h,i(i({ref:t},m),{},{components:a})):r.createElement(h,i({ref:t},m))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:n,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5759:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=a(7462),n=(a(7294),a(3905));const o={title:"Custom Shaders"},i=void 0,s={unversionedId:"tutorials/custom-shaders",id:"tutorials/custom-shaders",title:"Custom Shaders",description:"You can easily apply custom shaders in p6. A shader is a program that runs on the GPU and computes a color for each pixel of a rectangle. You can learn about shaders on the Art of Code channel.",source:"@site/docs/tutorials/12-custom-shaders.md",sourceDirName:"tutorials",slug:"/tutorials/custom-shaders",permalink:"/p6-docs/tutorials/custom-shaders",draft:!1,tags:[],version:"current",sidebarPosition:12,frontMatter:{title:"Custom Shaders"},sidebar:"tutorials",previous:{title:"Canvases",permalink:"/p6-docs/tutorials/canvases"},next:{title:"Read Pixel",permalink:"/p6-docs/tutorials/read-pixel"}},l={},p=[{value:"Load and Draw a shader",id:"load-and-draw-a-shader",level:2},{value:"Available information",id:"available-information",level:2},{value:"UV",id:"uv",level:3},{value:"Shape of the rectangle",id:"shape-of-the-rectangle",level:3},{value:"Window",id:"window",level:3},{value:"Sending parameters to shaders",id:"sending-parameters-to-shaders",level:2}],m={toc:p},u="wrapper";function c(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"You can easily apply custom shaders in p6. A shader is a program that runs on the GPU and computes a color for each pixel of a rectangle. You can learn about shaders on the ",(0,n.kt)("a",{parentName:"p",href:"https://youtu.be/u5HAYVHsasc?list=PLGmrMu-IwbguU_nY2egTFmlg691DN7uE5"},"Art of Code channel"),"."),(0,n.kt)("h2",{id:"load-and-draw-a-shader"},"Load and Draw a shader"),(0,n.kt)("admonition",{title:"Important",type:"info"},(0,n.kt)("p",{parentName:"admonition"},"For this example to work you must have a ",(0,n.kt)("em",{parentName:"p"},"res")," folder ",(0,n.kt)("strong",{parentName:"p"},"at the root of your project"),".",(0,n.kt)("br",null),"\n",(0,n.kt)("strong",{parentName:"p"},"And you must declare your ",(0,n.kt)("em",{parentName:"strong"},"res")," folder in CMake: ",(0,n.kt)("inlineCode",{parentName:"strong"},"p6_copy_folder(${PROJECT_NAME} res)")))),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/JulesFouchy/p6-docs/blob/main/examples/complete/CMakeLists.txt"},(0,n.kt)("strong",{parentName:"a"},"Here is an example of a ",(0,n.kt)("em",{parentName:"strong"},"CMakeLists.txt"))),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <p6/p6.h>\n\nint main()\n{\n    auto             ctx       = p6::Context{};\n    const p6::Shader my_shader = p6::load_shader("res/my_shader.frag");\n    ctx.update              = [&]() {\n        ctx.background({});\n        ctx.rectangle_with_shader(my_shader, p6::FullScreen{});\n    };\n    ctx.start();\n}\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-glsl",metastring:'title="res/my_shader.frag"',title:'"res/my_shader.frag"'},"#version 330\nout vec4 _frag_color;\n\nin vec2 _uniform_uv;\nin vec2 _raw_uv;\nin vec2 _canvas_uv;\n\nuniform float _aspect_ratio;\nuniform float _inverse_aspect_ratio;\nuniform vec2  _size;\nuniform float _window_aspect_ratio;\nuniform float _window_inverse_aspect_ratio;\n\nvoid main()\n{\n    vec2 uv = _uniform_uv;\n    _frag_color = vec4(vec3(smoothstep(0.301, 0.3, length(uv))), 1.); // Draw a white disk\n}\n")),(0,n.kt)("h2",{id:"available-information"},"Available information"),(0,n.kt)("h3",{id:"uv"},"UV"),(0,n.kt)("p",null,"You have different coordinate systems available to you:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"_uniform_uv")," is what you should use most of the time. It is centered around (0, 0) and the y-axis goes from -1 to 1. The x-axis will adapt to the aspect ratio of the rectangle (goes from ",(0,n.kt)("em",{parentName:"li"},"-_aspect_ratio")," to ",(0,n.kt)("em",{parentName:"li"},"+_aspect_ratio"),")."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"_raw_uv")," goes from 0 to 1 on both axes, no matter the aspect ratio of the rectangle. (0, 0) is in the bottom-left corner."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"_canvas_uv")," is like ",(0,n.kt)("em",{parentName:"li"},"_uniform_uv")," but the axes go from ",(0,n.kt)("em",{parentName:"li"},"-rectangle_radii")," to ",(0,n.kt)("em",{parentName:"li"},"+rectangle_radii"),". You will probably never have a use case for this one. It is used internally to draw strokes with an absolute size instead of them beeing proportional to the size of the rectangle.")),(0,n.kt)("h3",{id:"shape-of-the-rectangle"},"Shape of the rectangle"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"_aspect_ratio"),": Aspect ratio of the rectangle (width / height)."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"_inverse_aspect_ratio"),": Inverse aspect ratio of the rectangle (height / width)."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"_size"),": Size of the rectangle.")),(0,n.kt)("h3",{id:"window"},"Window"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"_window_aspect_ratio"),": Aspect ratio of the window (width / height)."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"_window_inverse_aspect_ratio"),": Inverse aspect ratio of the window (height / width).")),(0,n.kt)("h2",{id:"sending-parameters-to-shaders"},"Sending parameters to shaders"),(0,n.kt)("p",null,"Parameters for shaders are called ",(0,n.kt)("em",{parentName:"p"},"uniforms"),". You declare them in your shader like so:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-glsl",metastring:'title="res/my_shader.frag"',title:'"res/my_shader.frag"'},"#version 330\n\nuniform float my_parameter;\nuniform vec3  another_parameter;\n// . . .\n\nvoid main() {\n    _frag_color = vec4(another_parameter, 1.); // Use another_parameter like any other variable\n}\n")),(0,n.kt)("p",null,"And you send them to your shader with ",(0,n.kt)("inlineCode",{parentName:"p"},"set()"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},'ctx.update = [&]() {\n    my_shader.set("my_parameter", 3.14f);\n    my_shader.set("another_parameter", glm::vec3{0.1f, 0.4f, ctx.time()});\n    // . . .\n};\n')),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"To send a ",(0,n.kt)("inlineCode",{parentName:"p"},"Canvas")," or an ",(0,n.kt)("inlineCode",{parentName:"p"},"Image"),", declare it in the shader as ",(0,n.kt)("inlineCode",{parentName:"p"},"uniform sampler2D _my_image;"),".",(0,n.kt)("br",null),"\nAnd to read from it use ",(0,n.kt)("inlineCode",{parentName:"p"},"texture2D(_my_image, _raw_uv)"),"."),(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("strong",{parentName:"p"},"Check out a full example: ",(0,n.kt)("a",{parentName:"strong",href:"https://github.com/JulesFouchy/p6-docs/blob/main/tests/passing_images_to_shaders.cpp"},(0,n.kt)("em",{parentName:"a"},"p6 code"))," and ",(0,n.kt)("a",{parentName:"strong",href:"https://github.com/JulesFouchy/p6-docs/blob/main/tests/res/shader_applied_to_image.frag"},(0,n.kt)("em",{parentName:"a"},"shader")),"."))))}c.isMDXComponent=!0}}]);