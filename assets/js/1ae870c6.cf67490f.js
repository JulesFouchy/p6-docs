"use strict";(self.webpackChunkp6_docs=self.webpackChunkp6_docs||[]).push([[9229],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return u}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=p(a),u=r,h=d["".concat(l,".").concat(u)]||d[u]||c[u]||o;return a?n.createElement(h,i(i({ref:t},m),{},{components:a})):n.createElement(h,i({ref:t},m))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5759:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return m},default:function(){return d}});var n=a(2122),r=a(9756),o=(a(7294),a(3905)),i=["components"],s={title:"Custom Shaders"},l=void 0,p={unversionedId:"tutorials/custom-shaders",id:"tutorials/custom-shaders",isDocsHomePage:!1,title:"Custom Shaders",description:"You can easily apply custom shaders in p6. A shader is a program that runs on the GPU and computes a color for each pixel of a rectangle. You can learn about shaders on the Art of Code channel.",source:"@site/docs/tutorials/12-custom-shaders.md",sourceDirName:"tutorials",slug:"/tutorials/custom-shaders",permalink:"/p6-docs/tutorials/custom-shaders",tags:[],version:"current",sidebarPosition:12,frontMatter:{title:"Custom Shaders"},sidebar:"tutorials",previous:{title:"Canvases",permalink:"/p6-docs/tutorials/canvases"},next:{title:"Read Pixel",permalink:"/p6-docs/tutorials/read-pixel"}},m=[{value:"Load and Draw a shader",id:"load-and-draw-a-shader",children:[]},{value:"Available information",id:"available-information",children:[{value:"UV",id:"uv",children:[]},{value:"Shape of the rectangle",id:"shape-of-the-rectangle",children:[]},{value:"Window",id:"window",children:[]}]},{value:"Sending parameters to shaders",id:"sending-parameters-to-shaders",children:[]}],c={toc:m};function d(e){var t=e.components,a=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You can easily apply custom shaders in p6. A shader is a program that runs on the GPU and computes a color for each pixel of a rectangle. You can learn about shaders on the ",(0,o.kt)("a",{parentName:"p",href:"https://youtu.be/u5HAYVHsasc?list=PLGmrMu-IwbguU_nY2egTFmlg691DN7uE5"},"Art of Code channel"),"."),(0,o.kt)("h2",{id:"load-and-draw-a-shader"},"Load and Draw a shader"),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Important")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"For this example to work you must have a ",(0,o.kt)("em",{parentName:"p"},"res")," folder ",(0,o.kt)("strong",{parentName:"p"},"at the root of your project"),".",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"And you must declare your ",(0,o.kt)("em",{parentName:"strong"},"res")," folder in CMake: ",(0,o.kt)("inlineCode",{parentName:"strong"},"p6_copy_folder(${PROJECT_NAME} res)"))))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/JulesFouchy/p6-docs/blob/main/examples/complete/CMakeLists.txt"},(0,o.kt)("strong",{parentName:"a"},"Here is an example of a ",(0,o.kt)("em",{parentName:"strong"},"CMakeLists.txt"))),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <p6/p6.h>\n\nint main()\n{\n    auto             ctx       = p6::Context{};\n    const p6::Shader my_shader = p6::load_shader("res/my_shader.frag");\n    ctx.update              = [&]() {\n        ctx.background({});\n        ctx.rectangle_with_shader(my_shader, p6::FullScreen{});\n    };\n    ctx.start();\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-glsl",metastring:'title="res/my_shader.frag"',title:'"res/my_shader.frag"'},"#version 330\nout vec4 _frag_color;\n\nin vec2 _uniform_uv;\nin vec2 _raw_uv;\nin vec2 _canvas_uv;\n\nuniform float _aspect_ratio;\nuniform float _inverse_aspect_ratio;\nuniform vec2  _size;\nuniform float _window_aspect_ratio;\nuniform float _window_inverse_aspect_ratio;\n\nvoid main()\n{\n    vec2 uv = _uniform_uv;\n    _frag_color = vec4(vec3(smoothstep(0.301, 0.3, length(uv))), 1.); // Draw a white disk\n}\n")),(0,o.kt)("h2",{id:"available-information"},"Available information"),(0,o.kt)("h3",{id:"uv"},"UV"),(0,o.kt)("p",null,"You have different coordinate systems available to you:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_uniform_uv")," is what you should use most of the time. It is centered around (0, 0) and the y-axis goes from -1 to 1. The x-axis will adapt to the aspect ratio of the rectangle (goes from ",(0,o.kt)("em",{parentName:"li"},"-_aspect_ratio")," to ",(0,o.kt)("em",{parentName:"li"},"+_aspect_ratio"),")."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_raw_uv")," goes from 0 to 1 on both axes, no matter the aspect ratio of the rectangle. (0, 0) is in the bottom-left corner."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_canvas_uv")," is like ",(0,o.kt)("em",{parentName:"li"},"_uniform_uv")," but the axes go from ",(0,o.kt)("em",{parentName:"li"},"-rectangle_radii")," to ",(0,o.kt)("em",{parentName:"li"},"+rectangle_radii"),". You will probably never have a use case for this one. It is used internally to draw strokes with an absolute size instead of them beeing proportional to the size of the rectangle.")),(0,o.kt)("h3",{id:"shape-of-the-rectangle"},"Shape of the rectangle"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_aspect_ratio"),": Aspect ratio of the rectangle (width / height)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_inverse_aspect_ratio"),": Inverse aspect ratio of the rectangle (height / width)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_size"),": Size of the rectangle.")),(0,o.kt)("h3",{id:"window"},"Window"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_window_aspect_ratio"),": Aspect ratio of the window (width / height)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_window_inverse_aspect_ratio"),": Inverse aspect ratio of the window (height / width).")),(0,o.kt)("h2",{id:"sending-parameters-to-shaders"},"Sending parameters to shaders"),(0,o.kt)("p",null,"Parameters for shaders are called ",(0,o.kt)("em",{parentName:"p"},"uniforms"),". You declare them in your shader like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-glsl",metastring:'title="res/my_shader.frag"',title:'"res/my_shader.frag"'},"#version 330\n\nuniform float my_parameter;\nuniform vec3  another_parameter;\n// . . .\n\nvoid main() {\n    _frag_color = vec4(another_parameter, 1.); // Use another_parameter like any other variable\n}\n")),(0,o.kt)("p",null,"And you send them to your shader with ",(0,o.kt)("inlineCode",{parentName:"p"},"set()"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'ctx.update = [&]() {\n    my_shader.set("my_parameter", 3.14f);\n    my_shader.set("another_parameter", glm::vec3{0.1f, 0.4f, ctx.time()});\n    // . . .\n};\n')),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"To send a ",(0,o.kt)("inlineCode",{parentName:"p"},"Canvas")," or an ",(0,o.kt)("inlineCode",{parentName:"p"},"Image"),", declare it in the shader as ",(0,o.kt)("inlineCode",{parentName:"p"},"uniform sampler2D _my_image;"),".",(0,o.kt)("br",null),"\nAnd to read from it use ",(0,o.kt)("inlineCode",{parentName:"p"},"texture2D(_my_image, _raw_uv)"),"."),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("strong",{parentName:"p"},"Check out a full example: ",(0,o.kt)("a",{parentName:"strong",href:"https://github.com/JulesFouchy/p6-docs/blob/main/tests/passing_images_to_shaders.cpp"},(0,o.kt)("em",{parentName:"a"},"p6 code"))," and ",(0,o.kt)("a",{parentName:"strong",href:"https://github.com/JulesFouchy/p6-docs/blob/main/tests/res/shader_applied_to_image.frag"},(0,o.kt)("em",{parentName:"a"},"shader")),".")))))}d.isMDXComponent=!0}}]);