"use strict";(self.webpackChunkp6_docs=self.webpackChunkp6_docs||[]).push([[7417],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>c});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),d=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=d(r),u=a,c=m["".concat(l,".").concat(u)]||m[u]||k[u]||s;return r?n.createElement(c,o(o({ref:t},p),{},{components:r})):n.createElement(c,o({ref:t},p))}));function c(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[m]="string"==typeof e?e:a,o[1]=i;for(var d=2;d<s;d++)o[d]=r[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4707:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>k,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var n=r(7462),a=(r(7294),r(3905));const s={title:"p6::Shader",sidebar_position:1},o="p6::Shader",i={unversionedId:"reference/Types/shader",id:"reference/Types/shader",title:"p6::Shader",description:"Summary",source:"@site/docs/reference/Types/shader.md",sourceDirName:"reference/Types",slug:"/reference/Types/shader",permalink:"/p6-docs/reference/Types/shader",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"p6::Shader",sidebar_position:1},sidebar:"reference",previous:{title:"p6::RadiusY",permalink:"/p6-docs/reference/Types/radius_y"},next:{title:"p6::ShaderPaths",permalink:"/p6-docs/reference/Types/shader_paths"}},l={},d=[{value:"Summary",id:"summary",level:2},{value:"Details",id:"details",level:2},{value:"Shader()",id:"shader",level:3},{value:"Shader()",id:"shader-1",level:3},{value:"Shader()",id:"shader-2",level:3},{value:"set()",id:"set",level:3},{value:"set()",id:"set-1",level:3},{value:"set()",id:"set-2",level:3},{value:"set()",id:"set-3",level:3},{value:"set()",id:"set-4",level:3},{value:"set()",id:"set-5",level:3},{value:"set()",id:"set-6",level:3},{value:"set()",id:"set-7",level:3},{value:"set()",id:"set-8",level:3},{value:"set()",id:"set-9",level:3},{value:"set()",id:"set-10",level:3},{value:"use()",id:"use",level:3},{value:"id()",id:"id",level:3},{value:"check_for_errors_before_rendering()",id:"check_for_errors_before_rendering",level:3}],p={toc:d},m="wrapper";function k(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"p6shader"},"p6::Shader"),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null},"Name"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#shader"},"Shader")),"(",(0,a.kt)("inlineCode",{parentName:"td"},"std::string_view")," fragment_source_code)",(0,a.kt)("br",null),"Throws std::runtime_error if there is an error while compiling the shader source code.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#shader"},"Shader")),"(",(0,a.kt)("inlineCode",{parentName:"td"},"std::string_view")," vertex_source_code, ",(0,a.kt)("inlineCode",{parentName:"td"},"std::string_view")," fragment_source_code)",(0,a.kt)("br",null),"Throws std::runtime_error if there is an error while compiling the shader source code.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#shader"},"Shader")),"(",(0,a.kt)("inlineCode",{parentName:"td"},"[ShaderSources](/reference/Types/shader_sources) const &")," sources)",(0,a.kt)("br",null),"Throws std::runtime_error if there is an error while compiling the shader source code.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"void"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#set"},"set")),"(",(0,a.kt)("inlineCode",{parentName:"td"},"std::string_view")," uniform_name, ",(0,a.kt)("inlineCode",{parentName:"td"},"int")," value) const")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"void"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#set"},"set")),"(",(0,a.kt)("inlineCode",{parentName:"td"},"std::string_view")," uniform_name, ",(0,a.kt)("inlineCode",{parentName:"td"},"unsigned int")," value) const")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"void"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#set"},"set")),"(",(0,a.kt)("inlineCode",{parentName:"td"},"std::string_view")," uniform_name, ",(0,a.kt)("inlineCode",{parentName:"td"},"bool")," value) const")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"void"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#set"},"set")),"(",(0,a.kt)("inlineCode",{parentName:"td"},"std::string_view")," uniform_name, ",(0,a.kt)("inlineCode",{parentName:"td"},"float")," value) const")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"void"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#set"},"set")),"(",(0,a.kt)("inlineCode",{parentName:"td"},"std::string_view")," uniform_name, ",(0,a.kt)("inlineCode",{parentName:"td"},"const glm::vec2 &")," value) const")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"void"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#set"},"set")),"(",(0,a.kt)("inlineCode",{parentName:"td"},"std::string_view")," uniform_name, ",(0,a.kt)("inlineCode",{parentName:"td"},"const glm::vec3 &")," value) const")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"void"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#set"},"set")),"(",(0,a.kt)("inlineCode",{parentName:"td"},"std::string_view")," uniform_name, ",(0,a.kt)("inlineCode",{parentName:"td"},"const glm::vec4 &")," value) const")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"void"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#set"},"set")),"(",(0,a.kt)("inlineCode",{parentName:"td"},"std::string_view")," uniform_name, ",(0,a.kt)("inlineCode",{parentName:"td"},"const glm::mat2 &")," value) const")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"void"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#set"},"set")),"(",(0,a.kt)("inlineCode",{parentName:"td"},"std::string_view")," uniform_name, ",(0,a.kt)("inlineCode",{parentName:"td"},"const glm::mat3 &")," value) const")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"void"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#set"},"set")),"(",(0,a.kt)("inlineCode",{parentName:"td"},"std::string_view")," uniform_name, ",(0,a.kt)("inlineCode",{parentName:"td"},"const glm::mat4 &")," value) const")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"void"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#set"},"set")),"(",(0,a.kt)("inlineCode",{parentName:"td"},"std::string_view")," uniform_name, ",(0,a.kt)("inlineCode",{parentName:"td"},"const [ImageOrCanvas](/reference/Types/image_or_canvas) &")," image) const",(0,a.kt)("br",null),"\u26a0\ufe0f You can have at most 8 images set at once. This is a limitation of the GPUs.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"void"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#use"},"use")),"() const",(0,a.kt)("br",null),"Sets this as the current shader that will be used for rendering.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"GLuint"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#id"},"id")),"() const",(0,a.kt)("br",null),"Returns the OpenGL id of the program.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"void"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#check_for_errors_before_rendering"},"check_for_errors_before_rendering")),"() const",(0,a.kt)("br",null),"You can call this just before a draw call (e.g. ",(0,a.kt)("inlineCode",{parentName:"td"},"glDrawArrays"),") to check if your shader is set up properly (all textures have been set, etc.)")))),(0,a.kt)("h2",{id:"details"},"Details"),(0,a.kt)("h3",{id:"shader"},"Shader()"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#shader"},"Shader")),"(",(0,a.kt)("inlineCode",{parentName:"p"},"std::string_view")," fragment_source_code);")),(0,a.kt)("p",null,"Throws std::runtime_error if there is an error while compiling the shader source code. "),(0,a.kt)("h3",{id:"shader-1"},"Shader()"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#shader"},"Shader")),"(",(0,a.kt)("inlineCode",{parentName:"p"},"std::string_view")," vertex_source_code, ",(0,a.kt)("inlineCode",{parentName:"p"},"std::string_view")," fragment_source_code);")),(0,a.kt)("p",null,"Throws std::runtime_error if there is an error while compiling the shader source code. "),(0,a.kt)("h3",{id:"shader-2"},"Shader()"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#shader"},"Shader")),"(",(0,a.kt)("inlineCode",{parentName:"p"},"[ShaderSources](/reference/Types/shader_sources) const &")," sources);")),(0,a.kt)("p",null,"Throws std::runtime_error if there is an error while compiling the shader source code. "),(0,a.kt)("h3",{id:"set"},"set()"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"void")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#set"},"set")),"(",(0,a.kt)("inlineCode",{parentName:"p"},"std::string_view")," uniform_name, ",(0,a.kt)("inlineCode",{parentName:"p"},"int")," value) const;")),(0,a.kt)("h3",{id:"set-1"},"set()"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"void")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#set"},"set")),"(",(0,a.kt)("inlineCode",{parentName:"p"},"std::string_view")," uniform_name, ",(0,a.kt)("inlineCode",{parentName:"p"},"unsigned int")," value) const;")),(0,a.kt)("h3",{id:"set-2"},"set()"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"void")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#set"},"set")),"(",(0,a.kt)("inlineCode",{parentName:"p"},"std::string_view")," uniform_name, ",(0,a.kt)("inlineCode",{parentName:"p"},"bool")," value) const;")),(0,a.kt)("h3",{id:"set-3"},"set()"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"void")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#set"},"set")),"(",(0,a.kt)("inlineCode",{parentName:"p"},"std::string_view")," uniform_name, ",(0,a.kt)("inlineCode",{parentName:"p"},"float")," value) const;")),(0,a.kt)("h3",{id:"set-4"},"set()"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"void")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#set"},"set")),"(",(0,a.kt)("inlineCode",{parentName:"p"},"std::string_view")," uniform_name, ",(0,a.kt)("inlineCode",{parentName:"p"},"const glm::vec2 &")," value) const;")),(0,a.kt)("h3",{id:"set-5"},"set()"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"void")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#set"},"set")),"(",(0,a.kt)("inlineCode",{parentName:"p"},"std::string_view")," uniform_name, ",(0,a.kt)("inlineCode",{parentName:"p"},"const glm::vec3 &")," value) const;")),(0,a.kt)("h3",{id:"set-6"},"set()"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"void")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#set"},"set")),"(",(0,a.kt)("inlineCode",{parentName:"p"},"std::string_view")," uniform_name, ",(0,a.kt)("inlineCode",{parentName:"p"},"const glm::vec4 &")," value) const;")),(0,a.kt)("h3",{id:"set-7"},"set()"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"void")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#set"},"set")),"(",(0,a.kt)("inlineCode",{parentName:"p"},"std::string_view")," uniform_name, ",(0,a.kt)("inlineCode",{parentName:"p"},"const glm::mat2 &")," value) const;")),(0,a.kt)("h3",{id:"set-8"},"set()"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"void")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#set"},"set")),"(",(0,a.kt)("inlineCode",{parentName:"p"},"std::string_view")," uniform_name, ",(0,a.kt)("inlineCode",{parentName:"p"},"const glm::mat3 &")," value) const;")),(0,a.kt)("h3",{id:"set-9"},"set()"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"void")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#set"},"set")),"(",(0,a.kt)("inlineCode",{parentName:"p"},"std::string_view")," uniform_name, ",(0,a.kt)("inlineCode",{parentName:"p"},"const glm::mat4 &")," value) const;")),(0,a.kt)("h3",{id:"set-10"},"set()"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"void")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#set"},"set")),"(",(0,a.kt)("inlineCode",{parentName:"p"},"std::string_view")," uniform_name, ",(0,a.kt)("inlineCode",{parentName:"p"},"const [ImageOrCanvas](/reference/Types/image_or_canvas) &")," image) const;")),(0,a.kt)("p",null,"\u26a0\ufe0f You can have at most 8 images set at once. This is a limitation of the GPUs. "),(0,a.kt)("h3",{id:"use"},"use()"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"void")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#use"},"use")),"() const;")),(0,a.kt)("p",null,"Sets this as the current shader that will be used for rendering. "),(0,a.kt)("h3",{id:"id"},"id()"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"GLuint")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#id"},"id")),"() const;")),(0,a.kt)("p",null,"Returns the OpenGL id of the program. "),(0,a.kt)("p",null,"This is for advanced uses only. "),(0,a.kt)("h3",{id:"check_for_errors_before_rendering"},"check_for_errors_before_rendering()"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"void")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/reference/Types/shader#check_for_errors_before_rendering"},"check_for_errors_before_rendering")),"() const;")),(0,a.kt)("p",null,"You can call this just before a draw call (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"glDrawArrays"),") to check if your shader is set up properly (all textures have been set, etc.) "),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Updated on 2024 October 24"))}k.isMDXComponent=!0}}]);